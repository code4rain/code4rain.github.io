<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Kyoungdon&#39;s Blog</title>
    <description>Alex Kyoungdon Jang&#39;s Blog.
</description>
    <link>http://code4rain.github.io/</link>
    <atom:link href="http://code4rain.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Feb 2016 18:11:09 +0900</pubDate>
    <lastBuildDate>Fri, 12 Feb 2016 18:11:09 +0900</lastBuildDate>
    <generator>Jekyll v3.0.3</generator>
    
      <item>
        <title>Outlook Conversation Topic변경하기 by VBA sciprt</title>
        <description>&lt;p&gt;미루고 미뤄왔던 VBA스크립트 작성방법을 포스팅합니다.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;.&lt;/h1&gt;
</description>
        <pubDate>Tue, 17 Feb 2015 18:08:00 +0900</pubDate>
        <link>http://code4rain.github.io/outlook/vba/2015/02/17/outlook-conversation-topicbyeongyeonghagi-by-vba-sciprt.html</link>
        <guid isPermaLink="true">http://code4rain.github.io/outlook/vba/2015/02/17/outlook-conversation-topicbyeongyeonghagi-by-vba-sciprt.html</guid>
        
        
        <category>Outlook</category>
        
        <category>VBA</category>
        
      </item>
    
      <item>
        <title>TMUX설정</title>
        <description>&lt;h2 id=&quot;tmux&quot;&gt;TMUX&lt;/h2&gt;
&lt;p&gt;TMUX는 터미널화면을 분할하거나 Tab을 만들어서 사용할 수 있도록 도와주는 툴입니다.&lt;/p&gt;

&lt;p&gt;비슷한 프로그램으로는 &lt;a href=&quot;https://www.gnu.org/software/screen/&quot; title=&quot;스크린&quot;&gt;screen&lt;/a&gt;이 있습니다.&lt;/p&gt;

&lt;p&gt;TMUX에 간단한 소개는 아래 링크를 참고하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://nodeqa.com/nodejs_ref/99&quot;&gt;http://nodeqa.com/nodejs_ref/99&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tmux-1&quot;&gt;나의 TMUX설정&lt;/h2&gt;
&lt;p&gt;설정 후 화면 - 상단에 3개의 window가 떠 있는 것을 확인할 수 있다.
&lt;img src=&quot;images/tmux_preview.png&quot; alt=&quot;preview&quot; /&gt;
### .tmux.conf 내용
``` bash
## .tmux.conf 내용
# use UTF8
set -g utf8
set-window-option -g utf8 on&lt;/p&gt;

&lt;h1 id=&quot;make-tmux-display-things-in-256-colors&quot;&gt;make tmux display things in 256 colors&lt;/h1&gt;
&lt;p&gt;# set -g default-terminal “screen-256color”
set -g default-terminal “xterm”
set-window-option -g xterm-keys on&lt;/p&gt;

&lt;h1 id=&quot;set-scrollback-history-to-10000-10k&quot;&gt;set scrollback history to 10000 (10k)&lt;/h1&gt;
&lt;p&gt;set -g history-limit 10000&lt;/p&gt;

&lt;h1 id=&quot;set-ctrl-a-as-the-default-prefix-key-combination&quot;&gt;set Ctrl-a as the default prefix key combination&lt;/h1&gt;
&lt;p&gt;# and unbind C-b to free it up
set -g prefix C-j
unbind C-b
unbind C-a&lt;/p&gt;

&lt;h1 id=&quot;use-send-prefix-to-pass-c-a-through-to-application&quot;&gt;use send-prefix to pass C-a through to application&lt;/h1&gt;
&lt;p&gt;bind C-j send-prefix&lt;/p&gt;

&lt;h1 id=&quot;shorten-command-delay&quot;&gt;shorten command delay&lt;/h1&gt;
&lt;p&gt;set -sg escape-time 1&lt;/p&gt;

&lt;h1 id=&quot;set-window-and-pane-index-to-1-0-by-default&quot;&gt;set window and pane index to 1 (0 by default)&lt;/h1&gt;
&lt;p&gt;set-option -g base-index 1
setw -g pane-base-index 1&lt;/p&gt;

&lt;h1 id=&quot;reload-tmuxconf-using-prefix-r&quot;&gt;reload ~/.tmux.conf using PREFIX r&lt;/h1&gt;
&lt;p&gt;bind r source-file ~/.tmux.conf \; display “Reloaded!”&lt;/p&gt;

&lt;h1 id=&quot;use-prefix--to-split-window-horizontally-and-prefix---to-split-vertically&quot;&gt;use PREFIX | to split window horizontally and PREFIX - to split vertically&lt;/h1&gt;
&lt;p&gt;bind | split-window -h
bind \ split-window -h
bind - split-window -v&lt;/p&gt;

&lt;h1 id=&quot;make-the-current-window-the-first-window&quot;&gt;Make the current window the first window&lt;/h1&gt;
&lt;p&gt;bind T swap-window -t 1&lt;/p&gt;

&lt;h1 id=&quot;map-vi-movement-keys-as-pane-movement-keys&quot;&gt;map Vi movement keys as pane movement keys&lt;/h1&gt;
&lt;p&gt;bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R&lt;/p&gt;

&lt;h1 id=&quot;and-use-c-h-and-c-l-to-cycle-thru-panes&quot;&gt;and use C-h and C-l to cycle thru panes&lt;/h1&gt;
&lt;p&gt;bind -r C-h select-window -t :-
bind -r C-l select-window -t :+&lt;/p&gt;

&lt;h1 id=&quot;resize-panes-using-prefix-h-j-k-l&quot;&gt;resize panes using PREFIX H, J, K, L&lt;/h1&gt;
&lt;p&gt;bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5&lt;/p&gt;

&lt;h1 id=&quot;explicitly-disable-mouse-control&quot;&gt;explicitly disable mouse control&lt;/h1&gt;
&lt;p&gt;set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on
set-option -g mouse-utf8 on
# ———————
# Copy &amp;amp; Paste
# ———————
# provide access to the clipboard for pbpaste, pbcopy
# set-option -g default-command “reattach-to-user-namespace -l zsh”
# set-option -g default-command “bash”
set-option -g default-command “zsh”
set-window-option -g automatic-rename on&lt;/p&gt;

&lt;h1 id=&quot;use-vim-keybindings-in-copy-mode&quot;&gt;use vim keybindings in copy mode&lt;/h1&gt;
&lt;p&gt;setw -g mode-keys vi&lt;/p&gt;

&lt;h1 id=&quot;setup-v-to-begin-selection-as-in-vim&quot;&gt;setup ‘v’ to begin selection as in Vim&lt;/h1&gt;
&lt;p&gt;bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe “reattach-to-user-namespace pbcopy”
bind-key -t vi-copy y copy-pipe “xclip -selection clipboard -i”&lt;/p&gt;

&lt;h1 id=&quot;update-default-binding-of-enter-to-also-use-copy-pipe&quot;&gt;update default binding of ‘Enter’ to also use copy-pipe&lt;/h1&gt;
&lt;p&gt;unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe “reattach-to-user-namespace pbcopy”
bind-key -t vi-copy Enter copy-pipe “xclip -selection clipboard -i”&lt;/p&gt;

&lt;h1 id=&quot;bind-y-run-tmux-save-buffer----reattach-to-user-namespace-pbcopy-&quot;&gt;bind y run ‘tmux save-buffer - | reattach-to-user-namespace pbcopy ‘&lt;/h1&gt;
&lt;p&gt;# bind C-y run ‘tmux save-buffer - | reattach-to-user-namespace pbcopy ‘
bind y run “tmux show-buffer | xclip -i -selection clipboard”
bind C-y run “tmux show-buffer | xclip -i -selection clipboard”&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;———————-&lt;/h1&gt;
&lt;p&gt;# set some pretty colors
# ———————-
# set pane colors - hilight the active pane
# set-option -g pane-border-fg colour235 #base02
# set-option -g pane-active-border-fg colour240 #base01&lt;/p&gt;

&lt;h1 id=&quot;colorize-messages-in-the-command-line&quot;&gt;colorize messages in the command line&lt;/h1&gt;
&lt;p&gt;# set-option -g message-bg black #base02
# set-option -g message-fg brightred #orange&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;———————-&lt;/h1&gt;
&lt;p&gt;# Status Bar
# ———————–
set-option -g status on                # turn the status bar on
set -g status-utf8 on                  # set utf-8 for the status bar
set -g status-interval 5               # set update frequencey (default 15 seconds)
set -g status-justify centre           # center window list for clarity
set-option -g status-position top    # position the status bar at top of screen&lt;/p&gt;

&lt;h1 id=&quot;visual-notification-of-activity-in-other-windows&quot;&gt;visual notification of activity in other windows&lt;/h1&gt;
&lt;p&gt;setw -g monitor-activity on
set -g visual-activity on&lt;/p&gt;

&lt;h1 id=&quot;set-color-for-status-bar&quot;&gt;set color for status bar&lt;/h1&gt;
&lt;p&gt;#set-option -g status-bg colour235 #base02
# set-option -g status-bg default
# set-option -g status-fg yellow #yellow
# set-option -g status-fg white
# set-option -g status-attr dim&lt;/p&gt;

&lt;h1 id=&quot;set-window-list-colors---red-for-active-and-cyan-for-inactive&quot;&gt;set window list colors - red for active and cyan for inactive&lt;/h1&gt;
&lt;p&gt;set-window-option -g window-status-fg white
set-window-option -g window-status-bg colour236
set-window-option -g window-status-attr bright&lt;/p&gt;

&lt;p&gt;set-window-option -g window-status-current-fg black
set-window-option -g window-status-current-bg yellow
set-window-option -g window-status-current-attr bright&lt;/p&gt;

&lt;h1 id=&quot;show-host-name-and-ip-address-on-left-side-of-status-bar&quot;&gt;show host name and IP address on left side of status bar&lt;/h1&gt;
&lt;p&gt;set -g status-left-length 70
set -g status-left “#[fg=green]#h@#[fg=yellow]#(ifconfig eth0 | grep ‘inet ‘ | awk ‘{print $2}’)”&lt;/p&gt;

&lt;h1 id=&quot;show-session-name-window--pane-number-date-and-time-on-right-side-of&quot;&gt;show session name, window &amp;amp; pane number, date and time on right side of&lt;/h1&gt;
&lt;p&gt;# status bar
set -g status-right-length 60
set -g status-right “#[fg=blue]#S #I:#P#[fg=yellow]::%d %b %Y::#[fg=green]%l:%M %p::”&lt;/p&gt;

&lt;h4 id=&quot;colour-solarized-256&quot;&gt;COLOUR (Solarized 256)&lt;/h4&gt;

&lt;h1 id=&quot;default-statusbar-colors&quot;&gt;default statusbar colors&lt;/h1&gt;
&lt;p&gt;set-option -g status-bg colour235 #base02
set-option -g status-fg colour136 #yellow
set-option -g status-attr default&lt;/p&gt;

&lt;h1 id=&quot;default-window-title-colors&quot;&gt;default window title colors&lt;/h1&gt;
&lt;p&gt;# set-window-option -g window-status-fg colour244 #base0
# set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim&lt;/p&gt;

&lt;h1 id=&quot;active-window-title-colors&quot;&gt;active window title colors&lt;/h1&gt;
&lt;p&gt;# set-window-option -g window-status-current-fg colour166 #orange
# set-window-option -g window-status-current-bg default
#set-window-option -g window-status-current-attr bright&lt;/p&gt;

&lt;p&gt;set-window-option -g window-status-current-format “#[fg=colour235, bg=colour166]⮀#[fg=colour255, bg=colour166]#I:#W #[fg=colour166, bg=colour235]⮀”
set-window-option -g window-status-format “#[fg=colour235, bg=colour244]⮀#[fg=colour255, bg=colour244]#I:#W#F#[fg=colour244, bg=colour235]⮀”
# pane border
set-option -g pane-border-fg colour235 #base02
set-option -g pane-active-border-fg colour240 #base01&lt;/p&gt;

&lt;h1 id=&quot;message-text&quot;&gt;message text&lt;/h1&gt;
&lt;p&gt;set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange&lt;/p&gt;

&lt;h1 id=&quot;pane-number-display&quot;&gt;pane number display&lt;/h1&gt;
&lt;p&gt;set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange&lt;/p&gt;

&lt;h1 id=&quot;clock&quot;&gt;clock&lt;/h1&gt;
&lt;p&gt;set-window-option -g clock-mode-colour colour64 #green
# Smart pane switching with awareness of vim splits
bind -n C-h run “(tmux display-message -p ‘#{pane_current_command}’ | grep -iqE ‘(^|\/)vim(diff)?$’ &amp;amp;&amp;amp; tmux send-keys C-h) || tmux select-pane -L”
bind -n C-j run “(tmux display-message -p ‘#{pane_current_command}’ | grep -iqE ‘(^|\/)vim(diff)?$’ &amp;amp;&amp;amp; tmux send-keys C-j) || tmux select-pane -D”
bind -n C-k run “(tmux display-message -p ‘#{pane_current_command}’ | grep -iqE ‘(^|\/)vim(diff)?$’ &amp;amp;&amp;amp; tmux send-keys C-k) || tmux select-pane -U”
bind -n C-l run “(tmux display-message -p ‘#{pane_current_command}’ | grep -iqE ‘(^|\/)vim(diff)?$’ &amp;amp;&amp;amp; tmux send-keys C-l) || tmux select-pane -R”
bind -n C-\ run “(tmux display-message -p ‘#{pane_current_command}’ | grep -iqE ‘(^|\/)vim(diff)?$’ &amp;amp;&amp;amp; tmux send-keys ‘C-\’) || tmux select-pane -l”&lt;/p&gt;

&lt;h1 id=&quot;key-binding-for-altnum&quot;&gt;key binding for ALT+num&lt;/h1&gt;
&lt;p&gt;# switch windows alt+number
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9
```&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Aug 2014 16:46:00 +0900</pubDate>
        <link>http://code4rain.github.io/tool/2014/08/06/tmuxseoljeong.html</link>
        <guid isPermaLink="true">http://code4rain.github.io/tool/2014/08/06/tmuxseoljeong.html</guid>
        
        
        <category>Tool</category>
        
      </item>
    
      <item>
        <title>Change Outlook Subject with Python</title>
        <description>&lt;h2 id=&quot;progress&quot;&gt;Progress..&lt;/h2&gt;
&lt;p&gt;직장에 다니게 되면서 e-mail은 뗄레야 뗄 수 없는 사이가 되었습니다. 업무지시부터 각종 정보에 이르기까지 모든 것이 e-mail을 통해서 전달되기 때문이죠. 그런데 회사 메일은 받은 편지함 공간에 제약이 있었습니다. 읽지 않은 메일은 2주간, 읽은 메일은 1주일간만 보관 가능했습니다. 워낙 많은 사람들이 쓰고 있어서 공간제약은 어쩔 수 없는 면이 있죠. 그래서 대부분 선배, 동료, 후배들은 백업 용도로 아웃룩을 사용하고 있습니다. 출장 나가서 본 많은 주재원분들이나 업체에서는 아웃룩을 메인으로 쓰지만 회사 내부 규정상 아웃룩 발신을 제한하고 있어서 우리 회사에서는 메인보다는 백업용도로 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;아웃룩 2003까지는 뭐 그러려니 하고 search plugin을 설치해서 쓰고 있다가, 2010에 &lt;a href=&quot;http://support.microsoft.com/kb/2274243/ko&quot;&gt;conversation view(대화보기)&lt;/a&gt;라는 기능이 추가된 것을 알게 되었습니다. 메일 제목을 기준으로(엄밀히 이야기하면 메일 제목은 아닙니다만 :) 메일을 묶어주는 기능입니다.&lt;/p&gt;

&lt;p&gt;하루에 오는 메일들이 대부분 Reply나 Foword 형식이기 때문에 이 기능을 쓰게 되면 하루에 오는 몇 백통의 메일을 몇 십개로 묶어서 보여주는 효과가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오호라~!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;하지만 난관에 봉착합니다. 이 기능은 아웃룩에서 수발신한 메일들만 묶어줍니다. 회사메일에서 reply, foword를 하게되면 다른 conversation subject를 가진 메일로 인식하고 묶어주질 못하는 거죠. (통재라.ㅠㅠ)&lt;/p&gt;

&lt;p&gt;SW engineer가 이대로 포기할 순 없어서 검색해보기 시작합니다.&lt;/p&gt;

&lt;p&gt;우리의 친구 Google과 stackoverflow를 찾아보다가 &lt;a href=&quot;http://stackoverflow.com/questions/1440233/possible-to-intercept-and-rewrite-email-on-outlook-client-side-using-ironpython&quot;&gt;힌트&lt;/a&gt;를 발견합니다.
Python으로 뭔가 쿵짝쿵짝하면 될 것같은 느낌이 듭니다. 오호~&lt;/p&gt;

&lt;p&gt;열심히 스크립트도 만들고 수정해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;뭔가 되는 듯하더니 안됩니다.ㅠㅠ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;음 다시 Google과 stackoverflow를 뒤져봅니다.
&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/office/ff869318.aspx&quot;&gt;MSDN&lt;/a&gt;에 나온 걸 보니 conversationTopic을 변경이 안된다고 합니다. - READ Only attribute.&lt;/p&gt;

&lt;p&gt;이런…&lt;/p&gt;

&lt;p&gt;하지만 또 뒤져봅니다.&lt;/p&gt;

&lt;p&gt;… (_ _) (- - ) ( - -)&lt;/p&gt;

&lt;p&gt;걸렸습니다. Redemption DLL을 깔면 수정할 수 있답니다. (예~)&lt;/p&gt;

&lt;p&gt;그래서 기존에 온 메일을 일괄 정리하는 스크립트를 만듭니다. 쓱싹쓱싹 돌 때 심심하니 메일 하나를 처리하면 .하나를 찍어주도록 합니다.
다 되고 나서 Conversation View로 바꿔봅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;오예&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;잘됩니다.ㅋㅋㅋㅋ&lt;/p&gt;

&lt;p&gt;이제 매번 스크립트를 돌리기가 귀찮아집니다. 보통은 여기까지하고 그만두지만, 이번엔 아웃룩 VBA까지 건들여봅니다. 뚝딱뚝딱&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이힝~&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이제 메일이 오면 자동으로 정리해주도록 변경합니다. 아.. 내가 만든 VBA스크립트는 인증받지 않은 스크립트라 보안을 해제해줘야 합니다.
설마 회사에 스팸용 VBA 스크립트가 들어오진 않을테니, 보안담당자를 믿고 보안도 해제합니다.&lt;/p&gt;

&lt;p&gt;길고긴 삽질이 끝났습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;설치 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Download and install
    &lt;ul&gt;
      &lt;li&gt;Windows용 Python을 설치합니다.&lt;/li&gt;
      &lt;li&gt;Python은 Outlook을 32bit을 설치했으면 32bit을, 64bit을 설치했으면 64bit을 설치합니다.&lt;/li&gt;
      &lt;li&gt;다른 addon과의 호환성을 고려해서(attachemement remover는 32bit에서만 동작합니다.ㅠㅠ) 32bit을 설치합니다.&lt;/li&gt;
      &lt;li&gt;Python Download : &lt;a href=&quot;http://www.python.org/ftp/python/2.7.5/python-2.7.5.msi&quot;&gt;2.7.5 32bit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Python용 win32 library도 다운받습니다. : &lt;a href=&quot;http://sourceforge.net/projects/pywin32/files/pywin32/Build%20218/pywin32-218.win32-py2.7.exe/download&quot;&gt;pywin32-218.win32-py2.7.exe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Redemption DLL도 설치합니다. (설치가 잘 안되면 관리자 권한으로 설치합니다.) : &lt;a href=&quot;http://www.dimastr.com/redemption/Redemption.zip&quot;&gt;Redemption&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Make script&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;스크립트를 작성합니다. 아래 내용을 복붙해서 conversation.py로 만듭니다.
python이 제대로 설치되었다면 conversation.py를 double click하면 잘 실행이 됩니다.&lt;/p&gt;

&lt;p&gt;``` python
import os, sys, re
import win32com.client&lt;/p&gt;

&lt;p&gt;from win32com.client import Dispatch, constants&lt;/p&gt;

&lt;p&gt;def parse_folder(folder):
    print “Processing ## %s “%folder.Name.encode(‘euc-kr’)
    items = folder.Items
    while True:
        item = items.GetNext()
        if item == None:
            print “Done”
            break
        #print ‘\n’.join(dir(item))&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    objrdoitem = session.GetMessageFromID(item.EntryID, item.Parent.StoreID)

    sys.stdout.write(&#39;.&#39;)

    if objrdoitem.ConversationIndex == &#39;&#39; :
        continue

    if objrdoitem.ConversationIndex != &#39;&#39; :
        objrdoitem.ConversationIndex = &#39;&#39;
        objrdoitem.Save()

    if re.compile(r&#39;(Re|RE|Fwd|FW|Rq)+:*\s*:*(\d+|\[\d+\]|\(x*\d+\)|:|\*\d+|\(\d+\))+\s*:*\s*&#39;).search(item.ConversationTopic):
        NewTopic = re.sub(r&#39;(Re|RE|Fwd|FW)+:*\s*:*(\d+|\[\d+\]|\(x*\d+\)|:|\*\d+|\(\d+\))+\s*:*\s*&#39;,&#39;&#39;, item.ConversationTopic)
        objrdoitem.ConversationTopic = NewTopic
        objrdoitem.Save()

    if re.compile(r&#39;(Re|RE|Fwd|FW|Rq)+:*\s*:*(\d+|\[\d+\]|\(x*\d+\)|:|\*\d+|\(\d+\))+\s*:*\s*&#39;).search(item.Subject):
        NewTopic = re.sub(r&#39;(Re|RE|Fwd|FW)+:*\s*:*(\d+|\[\d+\]|\(x*\d+\)|:|\*\d+|\(\d+\))+\s*:*\s*&#39;,&#39;&#39;, item.Subject)
        objrdoitem.ConversationTopic = NewTopic
        objrdoitem.Save()
        #break

for i in range(1, folder.Folders.Count + 1):
    parse_folder(folder.Folders[i])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;win32com.client.gencache.EnsureDispatch(“Outlook.Application”)
outlook = win32com.client.Dispatch(“Outlook.Application”)
mapi = outlook.GetNamespace(‘MAPI’)
mapi.Logon()
session = win32com.client.Dispatch(“Redemption.RDOSession”)
session.Logon()
#top = mapi.Folders.Item(“Archives”)
for i in range(1, mapi.Folders.Count + 1):
        parse_folder(mapi.Folders[i])&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;/h2&gt;
&lt;p&gt;메일이 오면 자동으로 변경해주는 건 VBA스크립트를 만들어야 합니다.
방법이 살짝 귀찮으니 다음 Posting에 올립니다. :-)&lt;/p&gt;

</description>
        <pubDate>Mon, 24 Mar 2014 10:42:00 +0900</pubDate>
        <link>http://code4rain.github.io/python/outlook/2014/03/24/change-outlook-subject-with-python.html</link>
        <guid isPermaLink="true">http://code4rain.github.io/python/outlook/2014/03/24/change-outlook-subject-with-python.html</guid>
        
        
        <category>Python</category>
        
        <category>Outlook</category>
        
      </item>
    
      <item>
        <title>SSH 로그인시 접속지연 해결방법</title>
        <description>&lt;p&gt;사내망의 서버나 PC와 같이 IP에 대해 DNS에 도메인 네임이 등록되지 않는 서버에 접속시 로그인 과정에서 3,4초 딜레이가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;파일에 &lt;code class=&quot;highlighter-rouge&quot;&gt;UseDNS no&lt;/code&gt;을 추가하면 딜레이를 없앨 수 있다.&lt;/p&gt;

&lt;p&gt;파일 수정 수 ssh 데몬 재시작이 필요.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo /etc/init.d/ssh restart 혹은 service ssh restart&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Mar 2014 20:14:00 +0900</pubDate>
        <link>http://code4rain.github.io/2014/03/09/ssh-rogeuinsi-jeobsogjiyeon-haegyeolbangbeob.html</link>
        <guid isPermaLink="true">http://code4rain.github.io/2014/03/09/ssh-rogeuinsi-jeobsogjiyeon-haegyeolbangbeob.html</guid>
        
        
      </item>
    
      <item>
        <title>PUSH된 COMMIT내용 수정하기(Gerrit Review전)</title>
        <description>&lt;p&gt;Git에서 수정하고 Gerrit에 Push를 하였으나 아직 Review가 끝나지 않아 Merge되지 않은 상태에서 Commit을 수정해서 다시 Gerrit에 Patch #2로 올리는 간단한 방법을 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;수정하고 싶은 commit이 현재 HEAD라고 가정&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;comit------&quot;&gt;comit에 있는 일부 파일만 변경하고 싶을 때&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;수정하고 싶은 파일(a.c) 편집&lt;/li&gt;
  &lt;li&gt;git add a.c&lt;/li&gt;
  &lt;li&gt;git commit –amend -C HEAD // -C옵션은 HEAD에 있는 commit 내용을 그대로 사용한다는 의미입니다. 고로 Change Id도 유지되겠죠.&lt;/li&gt;
  &lt;li&gt;git push&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;commit--------&quot;&gt;commit에 있는 파일 중 하나를 이전으로 돌리고 싶을 떄&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;git checkout HEAD^ – &lt;돌리고 싶은=&quot;&quot; 파일명=&quot;&quot;&gt; // HEAD^는 현재 HEAD 바로 전 commit 내용을 기준으로 돌리겠다는 의미. HEAD^ 위치에 원하는 Commit의 SHA ID를 써주어도 됨.&lt;/돌리고&gt;&lt;/li&gt;
  &lt;li&gt;git add &lt;돌리고 싶은=&quot;&quot; 파일명=&quot;&quot;&gt;&lt;/돌리고&gt;&lt;/li&gt;
  &lt;li&gt;git commit –amend -C HEAD&lt;/li&gt;
  &lt;li&gt;git push&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 14 Dec 2012 12:59:00 +0900</pubDate>
        <link>http://code4rain.github.io/tip/git/2012/12/14/pushdoen-commitnaeyong-sujeonghagi-gerrit-reviewjeon.html</link>
        <guid isPermaLink="true">http://code4rain.github.io/tip/git/2012/12/14/pushdoen-commitnaeyong-sujeonghagi-gerrit-reviewjeon.html</guid>
        
        
        <category>TIP</category>
        
        <category>GIT</category>
        
      </item>
    
      <item>
        <title>Gvim 기본 시작 위치 변경</title>
        <description>&lt;p&gt;Windows에 설치된 Gvim을 메뉴에서 실행하게 되면 기본 저장 위치는 gvim이 시작된 위치로 저장된다.
예를 들면 &lt;code class=&quot;highlighter-rouge&quot;&gt;:w test.md&lt;/code&gt;라고 명령을 주는 경우에 내 PC의 경우에는 c:\windows\system 폴더에 test.md 파일이 저장이 된다.&lt;/p&gt;

&lt;p&gt;이것을 해결하기 위해서는 메뉴에 있는 gvim icon에서 오른쪽 마우스버튼을 눌러 속성창을 띄우고 나서 &lt;code class=&quot;highlighter-rouge&quot;&gt;시작 위치(S):&lt;/code&gt;에 자신이 원하는 디렉토리를 아래처럼 추가시켜준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gvim_cap00.png&quot; alt=&quot;Gvim short cut sample&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Dec 2012 10:40:00 +0900</pubDate>
        <link>http://code4rain.github.io/vim/2012/12/13/gvim-gibon-sijag-wici-byeongyeong.html</link>
        <guid isPermaLink="true">http://code4rain.github.io/vim/2012/12/13/gvim-gibon-sijag-wici-byeongyeong.html</guid>
        
        
        <category>VIM</category>
        
      </item>
    
      <item>
        <title>Octopress 간단 사용법</title>
        <description>&lt;h3 id=&quot;blog-post-&quot;&gt;Blog Post 만들기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source/_post&lt;/code&gt; 아래에 &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-post-title.markdown&lt;/code&gt; 형태로 저장해야 합니다.
자동으로 yaml meta data를 추가하여 해당 형태로 만들어주는 명령어가 아래와 같습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;rake new_post[&quot;&amp;lt;블로그 제목&amp;gt;&quot;]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;post-&quot;&gt;Post 작성하기&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rake new_post&lt;/code&gt; 명령을 통해 만들어진 &lt;code class=&quot;highlighter-rouge&quot;&gt;source/_post/YYYY-MM-DD-post-title.markdown&lt;/code&gt; 파일을 자신이 원하는 에디터로 수정합니다.
yaml meta data로 선언된 categories는 아래와 같이 방식으로 추가할 수 있습니다.
```
# One category
categories: Sass&lt;/p&gt;

&lt;h1 id=&quot;multiple-categories-example-1&quot;&gt;Multiple categories example 1&lt;/h1&gt;
&lt;p&gt;categories: [CSS3, Sass, Media Queries]&lt;/p&gt;

&lt;h1 id=&quot;multiple-categories-example-2&quot;&gt;Multiple categories example 2&lt;/h1&gt;
&lt;p&gt;categories:
- CSS3
- Sass
- Media Queries
```&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt; 아래에 markdown 문법으로 블로그를 작성합니다.&lt;/p&gt;

&lt;h3 id=&quot;page-&quot;&gt;Page 만들기&lt;/h3&gt;

&lt;폴더명&gt;\index.html로 만드는 방식과 &lt;원하는 파일명=&quot;&quot;&gt;.html 형식으로 만들 수 있습니다.

```
rake new_page[super-awesome]
# creates /source/super-awesome/index.markdown

rake new_page[super-awesome/page.html]
# creates /source/super-awesome/page.html
```

### 만든 Post &amp;amp; Page 게시하기

* markdown으로 만들어진 문서를 html로 변경하는 명령  
`rake generate`  
* 만들어진 문서를 미리보기  
`rake preview`  
* 웹으로 게시하기  
`rake deploy`  
  
* `rake generat`와 `rake deploy`를 동시에 수행하기  
`rake gen_deploy`
&lt;/원하는&gt;&lt;/폴더명&gt;
</description>
        <pubDate>Sun, 18 Nov 2012 00:05:00 +0900</pubDate>
        <link>http://code4rain.github.io/octopress/blog/2012/11/18/octopress-gandan-sayongbeob.html</link>
        <guid isPermaLink="true">http://code4rain.github.io/octopress/blog/2012/11/18/octopress-gandan-sayongbeob.html</guid>
        
        
        <category>Octopress</category>
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
